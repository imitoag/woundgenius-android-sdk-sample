package com.example.samplewoundsdk.core

import androidx.lifecycle.ProcessLifecycleOwner
import androidx.multidex.MultiDex
import androidx.multidex.MultiDexApplication
import com.example.samplewoundsdk.AppLifecycleObserver
import com.example.samplewoundsdk.R
import com.orhanobut.hawk.Hawk
import dagger.android.AndroidInjector
import dagger.android.DispatchingAndroidInjector
import dagger.android.HasAndroidInjector
import com.example.samplewoundsdk.di.scope.AppComponent
import com.example.samplewoundsdk.di.scope.DaggerAppComponent
import com.example.samplewoundsdk.BuildConfig
import com.example.woundsdk.data.pojo.cameramod.CameraMods
import com.example.woundsdk.di.WoundGeniusSDK
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.exceptions.UndeliverableException
import io.reactivex.plugins.RxJavaPlugins
import timber.log.Timber
import java.io.IOException
import java.net.SocketException
import javax.inject.Inject

class SampleWoundSDKApplication : MultiDexApplication(), HasAndroidInjector {

    @Inject
    lateinit var androidInjector: DispatchingAndroidInjector<Any>

    lateinit var appComponent: AppComponent

    @Inject
    lateinit var appLifecycleObserver: AppLifecycleObserver

    override fun onCreate() {
        super.onCreate()

        Hawk.init(this).build()
        MultiDex.install(this)
        Timber.plant(Timber.DebugTree())

        appComponent = DaggerAppComponent.builder()
            .application(this)
            .build().apply { inject(this@SampleWoundSDKApplication) }

        val allFeaturesLicenseKey = "eyJlbmMiOiJleUp0WlhSaElqcDdJbWx6YzNWbFpDSTZJakl3TWpNdE1EZ3RNREVnTVRFNk1EazZNVGtpTENKbGVIQnBjbmtpT2lJeU1ESXpMVEE0TFRBM0lERXhPakE1T2pBd0luMHNJbVJoZEdFaU9udDlMQ0pwYm1Oc2RXUmxaQ0k2VzNzaWFXUWlPaUpqYjIwdVpYaGhiWEJzWlM1ellXMXdiR1YzYjNWdVpITmtheUlzSW5SNWNHVWlPaUpoY0hCc2FXTmhkR2x2Ymtsa0luMHNleUpwWkNJNkltTnZiUzVsZUdGdGNHeGxMbmR2ZFc1a2MyUnJJaXdpZEhsd1pTSTZJbUZ3Y0d4cFkyRjBhVzl1U1dRaWZTeDdJbWxrSWpvaUlpd2lkSGx3WlNJNkltRndjR3hwWTJGMGFXOXVTV1FpZlN4N0ltbGtJam9pWW05a2VWQmhjblJRYVdOclpYSWlMQ0owZVhCbElqb2labVZoZEhWeVpVbGtJbjBzZXlKcFpDSTZJbmR2ZFc1a1JHVjBaV04wYVc5dUlpd2lkSGx3WlNJNkltWmxZWFIxY21WSlpDSjlMSHNpYVdRaU9pSjBhWE56ZFdWVWVYQmxSR1YwWldOMGFXOXVJaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUp3YUc5MGIwTmhjSFIxY21sdVp5SXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmU3g3SW1sa0lqb2lkbWxrWlc5RFlYQjBkWEpwYm1jaUxDSjBlWEJsSWpvaVptVmhkSFZ5WlVsa0luMHNleUpwWkNJNkltaGhibVI1YzJOeWIzQmxRMkZ3ZEhWeWFXNW5JaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUp5ZFd4bGNrMWxZWE4xY21WdFpXNTBRMkZ3ZEhWeWFXNW5JaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUp0WVhKclpYSk5aV0Z6ZFhKbGJXVnVkRU5oY0hSMWNtbHVaeUlzSW5SNWNHVWlPaUptWldGMGRYSmxTV1FpZlN4N0ltbGtJam9pYldGdWRXRnNUV1ZoYzNWeVpXMWxiblJKYm5CMWRDSXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmU3g3SW1sa0lqb2liWFZzZEdsd2JHVlhiM1Z1WkhOUVpYSkpiV0ZuWlNJc0luUjVjR1VpT2lKbVpXRjBkWEpsU1dRaWZTeDdJbWxrSWpvaWJHOWpZV3hUZEc5eVlXZGxTVzFoWjJWeklpd2lkSGx3WlNJNkltWmxZWFIxY21WSlpDSjlMSHNpYVdRaU9pSnNiMk5oYkZOMGIzSmhaMlZXYVdSbGIzTWlMQ0owZVhCbElqb2labVZoZEhWeVpVbGtJbjBzZXlKcFpDSTZJbUpoY21OdlpHVlRZMkZ1Ym1sdVp5SXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmVjE5Iiwic2lnIjoiUU8yZXJJOG8vQmVGKy9BRnNjVXpRNk0wdmFMREFkYks1OTloaEMzV0lNS3NJTnhqVnRKK1psbXpyUUlPc0VaTkVGcXFxS0dJTW4yM0FhbkxSRXFubCtscC83UkloOFFMWnFydElQQlo3dTJLMHRUNllLYmFWN0J5MjVINjA2WXVYWHd0Y3RZNDlvVzdSL1BuYm9ralhMbk42ZTVlSHU2RjNMMGtWc2lHMjI3YW94TlYyK2lBbXVmeERtTmg3ckVLZXRFL2pDcGFWNitCQmo5UnJlOXR6blgxV29seGJPcE9LdlQ4TmN4SHhwOFNVUlRHZFRxLy85M3RFa1lsZ0NvVGJCTDhnWkc1Yy9Kajl0THVRY3REOUpud0N5TXVwMTVxaHVrZk9BcnZYOEtyR3UwUzVVbWMzaFo0bFNzUEQ4c2pXVmU1WWQ0QzRVczBmL0E3NGpBTi9uMTh5Z29VbWladVo5b3JNL1U1ZXVVc0xMN0FEVE5oUStoMk5JQzZxS2s2anpwYlljWTlibi9WTVVaR0dxdDh6WlZaQTZuTUNnQXpjdWQrZ3N0TFFQajFPM3NwQksyN0xXaWdPZTRHNmxsM2o1R3lrV2p4akhrRmd6VEZLeUN4d1BnMkYvWkFWU0NqWHJCSXBrQnF3Z0ZaK1VlMXpaSXhHZTA4aDNWZE1vUXo5Zi9oV2tPVWN2dWEwejRZSFJhcmd3VzVJNkI2MTllTkxkNGVIL2t4VU5Lb2ppMUIyRUtSMmlqd0pYaWJpcWY1VlhGemlrMC8wa2VNUStGeDRObjBXbkM1ZCtSYXhRODRNNVl1azJUNWRqZDBmM1diWjdlcm1pY0V6QlpSRjJuM01GeWRLcHE3Q1A5dURhWDN0L1h4N1VwQnN1LzROdkxGRmkxdWJ2QkpKTVE9IiwiYWxnIjoiMSJ9"
        val thirdFeaturesKey = "eyJlbmMiOiJleUp0WlhSaElqcDdJbWx6YzNWbFpDSTZJakl3TWpNdE1EZ3RNREVnTVRFNk1UUTZNVElpTENKbGVIQnBjbmtpT2lJeU1ESXpMVEE0TFRBM0lERXhPakUwT2pBd0luMHNJbVJoZEdFaU9udDlMQ0pwYm1Oc2RXUmxaQ0k2VzNzaWFXUWlPaUpqYjIwdVpYaGhiWEJzWlM1ellXMXdiR1YzYjNWdVpITmtheUlzSW5SNWNHVWlPaUpoY0hCc2FXTmhkR2x2Ymtsa0luMHNleUpwWkNJNkltTnZiUzVsZUdGdGNHeGxMbmR2ZFc1a2MyUnJJaXdpZEhsd1pTSTZJbUZ3Y0d4cFkyRjBhVzl1U1dRaWZTeDdJbWxrSWpvaVltOWtlVkJoY25SUWFXTnJaWElpTENKMGVYQmxJam9pWm1WaGRIVnlaVWxrSW4wc2V5SnBaQ0k2SW5KMWJHVnlUV1ZoYzNWeVpXMWxiblJEWVhCMGRYSnBibWNpTENKMGVYQmxJam9pWm1WaGRIVnlaVWxrSW4wc2V5SnBaQ0k2SW0xaGNtdGxjazFsWVhOMWNtVnRaVzUwUTJGd2RIVnlhVzVuSWl3aWRIbHdaU0k2SW1abFlYUjFjbVZKWkNKOVhYMD0iLCJzaWciOiJobUZPekVZUEJvTWpLSG04QXgrL1ZOQmcvWXNPUVc3dmk1dTBnRTdLMjdEV2VvWU8zWXV4eTg0ZUYzVDcra3lEcTRyWGlodCtFT1ZMZjYrNmp6MWRsdU84OTJ0R295aG9pSnpKclhVblk4R2V5b1ZwM2VKNmVZWE5iQ3IyTGhGd2ZWQ0laTTM1aEhyVTd3SEUxYW9ZNkxxRWt3QWxUK1lXVFhweXZ6andNWVdBbmMvd0cxNG9TVnlMUyt5ZFNhdlVja0V3bmdEZHppVCs4T1RTZFlTR3Vvb0NBWWtKUUgzQ1lsMmlhZ3JSMFgrTGRMOGRxTGQyc2NzVDlJM2JzM1A5c1VBWHQ2M2pMb1lpR1hrRDlPS3hiMUtLbUpDb2FVdG9wbmcxTzRCNHVOT015dXBWRDhOOFJCUi94QVZRVGdsRTJoQWRhQ3pCUnYvZDNFby8weFBSVjhGM0UrcE5ZSmdXZkN2WU5JNzZ0TkNTRVl2NTZtanFkQk5tbmRGTndRSUYvRFJpKzhZWDBGekJFVHJuTWNtWm9MMXZMS3pabU9kQ3ZVQ3kxWC9OQnRPNFhUdysxY3J1UHk5UFY3TXQ2anZ3M3VRc1ZXZ2pqRDZyZUREbnFrYkxCNmxzQ3FKZEhVNmxQRXpPc2RJOFZIdzJtM1plSTJmSlVwTjhNWVpmQkN4OFFKT0tndDIrOWdueldUblA2ZFFVcFBCak9iKzdLT1h6R0x5SjFFNmNESjhOeDdJeTNSbE9yelgzOG5ETi9zM0p2RmZTb2RuRW5rdXE5K0poNis5bU9zQ0NNVW1FVjh4UHQySE16T2MzWDNiOUhoMHhyZHc3YTVGSGdCSUFvKzdiZkRrQTZrUFgyTEtXTC95Ti9FcDQ4ekdJbzFrSll5QWd5d3AyblY1OUx5RT0iLCJhbGciOiIxIn0="
        val licenseKey = "eyJlbmMiOiJleUp0WlhSaElqcDdJbWx6YzNWbFpDSTZJakl3TWpNdE1EY3RNamNnTVRjNk1UYzZNRE1pTENKbGVIQnBjbmtpT2lJeU1ESXpMVEEzTFRNeElERTNPakUzT2pBd0luMHNJbVJoZEdFaU9udDlMQ0pwYm1Oc2RXUmxaQ0k2VzNzaWFXUWlPaUpwYnk1cGJXbDBieTVDYjNWdVpHbHVaMUJ2YVc1MGMwUmxkR1ZqZEc5eUlpd2lkSGx3WlNJNkltRndjR3hwWTJGMGFXOXVTV1FpZlN4N0ltbGtJam9pWW05a2VWQmhjblJRYVdOclpYSWlMQ0owZVhCbElqb2labVZoZEhWeVpVbGtJbjBzZXlKcFpDSTZJbmR2ZFc1a1JHVjBaV04wYVc5dUlpd2lkSGx3WlNJNkltWmxZWFIxY21WSlpDSjlMSHNpYVdRaU9pSjBhWE56ZFdWVWVYQmxSR1YwWldOMGFXOXVJaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUp3YUc5MGIwTmhjSFIxY21sdVp5SXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmU3g3SW1sa0lqb2lkbWxrWlc5RFlYQjBkWEpwYm1jaUxDSjBlWEJsSWpvaVptVmhkSFZ5WlVsa0luMHNleUpwWkNJNkltaGhibVI1YzJOeWIzQmxRMkZ3ZEhWeWFXNW5JaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUp5ZFd4bGNrMWxZWE4xY21WdFpXNTBRMkZ3ZEhWeWFXNW5JaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUp0WVhKclpYSk5aV0Z6ZFhKbGJXVnVkRU5oY0hSMWNtbHVaeUlzSW5SNWNHVWlPaUptWldGMGRYSmxTV1FpZlN4N0ltbGtJam9pYldGdWRXRnNUV1ZoYzNWeVpXMWxiblJKYm5CMWRDSXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmU3g3SW1sa0lqb2liWFZzZEdsd2JHVlhiM1Z1WkhOUVpYSkpiV0ZuWlNJc0luUjVjR1VpT2lKbVpXRjBkWEpsU1dRaWZTeDdJbWxrSWpvaWJHOWpZV3hUZEc5eVlXZGxTVzFoWjJWeklpd2lkSGx3WlNJNkltWmxZWFIxY21WSlpDSjlMSHNpYVdRaU9pSnNiMk5oYkZOMGIzSmhaMlZXYVdSbGIzTWlMQ0owZVhCbElqb2labVZoZEhWeVpVbGtJbjBzZXlKcFpDSTZJbUpoY21OdlpHVlRZMkZ1Ym1sdVp5SXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmVjE5Iiwic2lnIjoiUzZSOUEwUnU4S2VWT2xuRXRPaDFkQ1ZFRjQwdk1vU2QyVjhBeEZtNzR4S3J3U29SWmprM2lKVXI1Zy9MbVBnS3d4c0RsR1RDM3Rkak94UXNBR2RuSSt4Vi8wZjVVOER6SHFGSWFkT3JyZzRnWGFXeThIRmRLdDNDbEtVVVRDMzdaQVFSZnYwOVB3UDJSRC9QUlA2VFZ2YkNtZjZTV2pBNGhxcmZZSFZrTkRoK21ETTYvZlpiN3p4aytIWm5BY3c5Vy9Pa0tRdzNRTHZ1NnBlRGFLRGJJaFN2MjZQV3E0Z2N2bGk4RlZsRXhWTTMwWlAzZGxqWjYrTFB3QkJ6L3h5a2NWZzVWSm00VUR4SDkzYlJXOGc3N05PdUtLUG5jRWlHb1J1R3NjY3BtN0lQL0NncTRJZDVaZ2h3Q2JHMkdSZmYrK3c2V2F0UDQ5R2hUOVZFeW0vUWU5THcrUDYvSG16YlUyamZVNStyUzlUK011ckgrLzIxdEpqSTkwT1lIVnVuQ2Nxb2lBWFFxdVF3ejhrYTNpcnRjbWI5enc1dVZpRjd5UjJQQlRpcFBTdFlTSU9iU2czdkVhdDRCRzhycUp4KzZTakpPUEg1SEpBT0c2SHh6VjdBTkUrNlFVWE51WUhxQUpRTTVFTitHbEJDRSt4Qi9OcTFVbzM4YUZ6S2JIYlhiL0FaazJUZnNDVUpaZmdFdjk1Q3pCbS9IMjZrdURjbDd2b1JBNUJSaWp3bDdxUGJVODUyblRoV25ZWkZmMTNEdWRwTzhqYjl2RHV0ZGEwMWpwS0RWQXd3QTJCVUNHQTNXYmZJSmwwRHFpbTl3aGNMdUdObktwa0NCN2s5UU1zdVBaVXdld2hCQkJYcmpaUVQ4c2RuNDBKUklqV3JXbTFZMk5ma3pJU1VZOUk9IiwiYWxnIjoiMSJ9"
        val newLicenseKey = "eyJlbmMiOiJleUp0WlhSaElqcDdJbWx6YzNWbFpDSTZJakl3TWpNdE1EZ3RNRE1nTVRNNk5UWTZORGNpTENKbGVIQnBjbmtpT2lJeU1ESXpMVEE0TFRNeElERXpPalUyT2pBd0luMHNJbVJoZEdFaU9udDlMQ0pwYm1Oc2RXUmxaQ0k2VzNzaWFXUWlPaUpqYjIwdVpYaGhiWEJzWlM1ellXMXdiR1YzYjNWdVpITmtheUlzSW5SNWNHVWlPaUpoY0hCc2FXTmhkR2x2Ymtsa0luMHNleUpwWkNJNkltTnZiUzVsZUdGdGNHeGxMbmR2ZFc1a2MyUnJJaXdpZEhsd1pTSTZJbUZ3Y0d4cFkyRjBhVzl1U1dRaWZTeDdJbWxrSWpvaVltOWtlVkJoY25SUWFXTnJaWElpTENKMGVYQmxJam9pWm1WaGRIVnlaVWxrSW4wc2V5SnBaQ0k2SW5kdmRXNWtSR1YwWldOMGFXOXVJaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUowYVhOemRXVlVlWEJsUkdWMFpXTjBhVzl1SWl3aWRIbHdaU0k2SW1abFlYUjFjbVZKWkNKOUxIc2lhV1FpT2lKd2FHOTBiME5oY0hSMWNtbHVaeUlzSW5SNWNHVWlPaUptWldGMGRYSmxTV1FpZlN4N0ltbGtJam9pZG1sa1pXOURZWEIwZFhKcGJtY2lMQ0owZVhCbElqb2labVZoZEhWeVpVbGtJbjBzZXlKcFpDSTZJbWhoYm1SNWMyTnliM0JsUTJGd2RIVnlhVzVuSWl3aWRIbHdaU0k2SW1abFlYUjFjbVZKWkNKOUxIc2lhV1FpT2lKeWRXeGxjazFsWVhOMWNtVnRaVzUwUTJGd2RIVnlhVzVuSWl3aWRIbHdaU0k2SW1abFlYUjFjbVZKWkNKOUxIc2lhV1FpT2lKdFlYSnJaWEpOWldGemRYSmxiV1Z1ZEVOaGNIUjFjbWx1WnlJc0luUjVjR1VpT2lKbVpXRjBkWEpsU1dRaWZTeDdJbWxrSWpvaWJXRnVkV0ZzVFdWaGMzVnlaVzFsYm5SSmJuQjFkQ0lzSW5SNWNHVWlPaUptWldGMGRYSmxTV1FpZlN4N0ltbGtJam9pYlhWc2RHbHdiR1ZYYjNWdVpITlFaWEpKYldGblpTSXNJblI1Y0dVaU9pSm1aV0YwZFhKbFNXUWlmU3g3SW1sa0lqb2liRzlqWVd4VGRHOXlZV2RsU1cxaFoyVnpJaXdpZEhsd1pTSTZJbVpsWVhSMWNtVkpaQ0o5TEhzaWFXUWlPaUpzYjJOaGJGTjBiM0poWjJWV2FXUmxiM01pTENKMGVYQmxJam9pWm1WaGRIVnlaVWxrSW4wc2V5SnBaQ0k2SW1KaGNtTnZaR1ZUWTJGdWJtbHVaeUlzSW5SNWNHVWlPaUptWldGMGRYSmxTV1FpZlYxOSIsInNpZyI6Ikl5UWJ1ZDQ4cWg4MHlOOUNxTGNxcmxkd1pBVmpIZ3REbXBCSElqZWhKYVh4M0d6bU1lTWJQYnpNa0krVFRZQXdvR1ZuM0VsYUc1NVBkNHB1TEpLUktacnRNVkZ0c0NlQjY1UkdEWjREUCtsNjY4eUt6ZlcxbnE3MUJpTk5FeVcxTzdKR1dBQXpVaWpYcTFRMG8wSHV1dTVReUNUdFdPQWo5WU1lUWNyMllGXC91dEVsTXZWTkUyYmU1ZmtJcW5ValFVUUQwTDRudk1QNGZOSmo1ZUZQSlMwdXZEdVFvcGltZHdSdmI3cmVBRStIS0pCUVwvdyt5RW1DV0Q2TVNiQlhFWHlnYWNxVTdBbjhOUUowOGllRmt4cExpNkRUNFBqYkdcL0V6QXBnV3lyejc4WTZqNHh3K1FPQ255NXRzYzEyU1NUQ2pNbnVCeFdQWFZWeUp4Uytic2dYa2dPYk0yNDNMQXY4YVBWSW04SStMc01WcllZanFsZzNEWFwvRE5XaldkajdRK3pQVml0azFLWjNGQ1NDKzBaa0dJVkNoZ0FTZnpPV0F6MHYrb3hLbU9kRk10Mms4RWxZT1FXbE5CNGlUWnMzamRtWnNZdk84SFduQWlSVWVkK0dyZHdnZjdSQjhRWjBTMmJkbTY4dWFLak5qaG1nblR4RnpXaEE0RXk5cUpGd3J0cnpFMFBqbjNGSStYTzlsbXlxZWVNbzEyNGdMTXZRckl5SFwvaHZVN1VCR3RMalM1T25SUHorVitcLzBpZ0NEWE5LOVdHUFU1VFRTMVlNYkNQeVRPNmlvMCtUYUVXMEJDdEo0S1R2TUJ3UFdKUWNwSEdHRVh1enNVb3RZRG5LMjdFc1JwV0pLc1dnanM3ZWtncyswNWxJNEExUlZOYlNSXC9RcGo0VGNMcHRTaz0iLCJhbGciOiIxIn0="
        WoundGeniusSDK.init(
            application = this,
            appBundleId = BuildConfig.APPLICATION_ID
//            licenseKey = newLicenseKey
        )
        // Configuration settings for SDK, comment to use default settings
        WoundGeniusSDK.configure(
            isAddBodyPickerOnCaptureScreenAvailable = true,
            maxNumberOfMedia = 2,
            isMultipleOutlinesEnabled = true
        )

        RxJavaPlugins.setErrorHandler { e: Throwable ->
            var error = e
            if (error is UndeliverableException) {
                error.cause?.let { error = it }
            }
            if (error is IOException || error is SocketException) {
                // fine, irrelevant network problem or API that throws on cancellation
                return@setErrorHandler
            }
            if (error is InterruptedException) {
                // fine, some blocking code was interrupted by a dispose call
                return@setErrorHandler
            }
            if (error is NullPointerException || error is IllegalArgumentException) {
                // that's likely a bug in the application
                Thread.currentThread().uncaughtExceptionHandler
                    ?.uncaughtException(Thread.currentThread(), error)
                return@setErrorHandler
            }
            if (error is IllegalStateException) {
                // that's a bug in RxJava or in a custom operator
                Thread.currentThread().uncaughtExceptionHandler
                    ?.uncaughtException(Thread.currentThread(), error)
                return@setErrorHandler
            }
        }

        ProcessLifecycleOwner.get().lifecycle.addObserver(appLifecycleObserver)

    }

    override fun androidInjector(): AndroidInjector<Any> = androidInjector
}
